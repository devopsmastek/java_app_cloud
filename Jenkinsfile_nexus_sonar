node 
{   

                 
   def mvnHome
   stage('scm checkout') { 
      
      git 'https://github.com/devopsmastek/java_app_cloud.git'
                
      
   }
   stage('Build') {
     def MVN_HOME = tool name: 'MAVEN', type: 'maven'
     def MVNCMD = "${MVN_HOME}/bin/mvn"
     sh "${MVNCMD} clean package  "
      
      }

   stage('SonarQube Analysis') {
        def MVN_HOME =  tool name: 'MAVEN', type: 'maven'
        withSonarQubeEnv('SonarNexus') { 
          sh "${MVN_HOME}/bin/mvn sonar:sonar"
        }
    }
      
      
      stage("Quality Gate Status Check"){
          timeout(time: 1, unit: 'HOURS') {
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                 
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
      }    
      
      stage("publish to nexus") {
            
	    
	     environment {
        // This can be nexus3 or nexus2
        NEXUS_VERSION = "2.14.13"
        // This can be http or https
        NEXUS_PROTOCOL = "http"
        // Where your Nexus is running
        NEXUS_URL = "13.127.210.139:9999"
        // Repository where we will upload the artifact
        NEXUS_REPOSITORY = "java_app"
        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = "nexus"
	}
	    
                
       nexusArtifactUploader (
        artifactId: 'myweb',
        file: '/var/lib/jenkins/workspace/java_app_cloud_sonar/target/myweb-1.1.war',
        groupId: 'in.javahome',
        type:'war',
        nexusPassword: 'admin123',
        nexusUrl: '13.127.210.139:9999/nexus',
        nexusUser: 'admin',
        nexusVersion: '2.14.13',
        protocol: 'http',
        repository: 'java_app',
        version: '0.0.1-SNAPSHOT');
            
        }
      
     
   
   stage ('deploy')
          {
          
    def source = "/var/lib/jenkins/workspace/java_app_cloud_sonar/target/myweb-1.${env.BUILD_NUMBER}"
    def  destination = "/var/lib/tomcat8/webapps/"
    sh "cp -r ${source} ${destination} "
      
        }
}
